syntax = "proto3";

/**
 * The different types of QIR values.
 */
message Null {}
message Number { int32 value = 1; }
message Double { double value = 1; }
message String { string value = 1; }
message Boolean { bool value = 1; }

/**
 * The different types of QIR operators.
 */
message Scan {
	Expression table = 1;
}

message Project {
	Expression format = 1;
	Expression input = 2;
}

message Filter {
	Expression filter = 1;
	Expression input = 2;
}

message Sort {
	Expression rows = 1;
	Expression ascending = 2;
	Expression input = 3;
}

message Limit {
	Expression limit = 1;
	Expression input = 2;
}

message Group {
	Expression rows = 1;
	Expression input = 2;
}

message Join {
	Expression filter = 1;
	Expression left = 2;
	Expression right = 3;
}

/**
 * The different types of QIR functional nodes.
 */
message Identifier {
	string name = 1;
}

message Lambda {
	Expression parameter = 1;
	Expression body = 2;
}

message Application {
	Expression function = 1;
	Expression argument = 2;
}

message Conditional {
	Expression condition = 1;
	Expression on_true = 2;
	Expression on_false = 3;
}

/**
 * The different types of QIR list nodes.
 */
message ListNil {}

message ListCons {
	Expression head = 1;
	Expression tail = 2;
}

message ListDestr {
	Expression input = 1;
	Expression on_nil = 2;
	Expression on_cons = 3;
}

/**
 * The different types of QIR named tuple nodes.
 */
message TupleNil {}

message TupleCons {
	Expression key = 1;
	Expression value = 2;
	Expression tail = 3;
}

message TupleDestr {
	Expression input = 1;
	Expression key = 2;
}

/**
 * Other special nodes supported by the QIR.
 */
message Builtin {
	string name = 1;
}

message Table  {
	string database = 1;
	string table = 2;
}

/**
 * A QIR expression.
 */
message Expression {
	oneof node {
		Null Null = 1;
		Number Number = 2;
		Double Double = 3;
		String String = 4;
		Boolean Boolean = 5;
		Scan Scan = 6;
		Filter Filter = 7;
		Project Project = 8;
		Sort Sort = 9;
		Limit Limit = 10;
		Group Group = 11;
		Join Join = 12;
		Identifier Identifier = 13;
		Lambda Lambda = 14;
		Application Application = 15;
		Conditional Conditional = 16;
		ListNil ListNil = 17;
		ListCons ListCons = 18;
		ListDestr ListDestr = 19;
		TupleNil TupleNil = 20;
		TupleCons TupleCons = 21;
		TupleDestr TupleDestr = 22;
		Builtin Builtin = 23;
		Table Table = 24;
	}
}

/**
 * A remote QIR evaluation service.
 */
service Evaluator {
	rpc Evaluate (Expression) returns (Expression) {}
}
