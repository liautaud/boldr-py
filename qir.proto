syntax = "proto3";

/**
 * The different types of QIR values.
 */
message Null {}
message Number { int32 value = 1; }
message Double { double value = 1; }
message String { string value = 1; }
message Boolean { bool value = 1; }

/**
 * The different types of QIR operators.
 */
message Scan {
	Expression table = 1;
}

message Project {
	Expression format = 1;
	Expression input = 2;
}

message Filter {
	Expression filter = 1;
	Expression input = 2;
}

message Sort {
	Expression rows = 1;
	Expression ascending = 2;
	Expression input = 3;
}

message Limit {
	Expression limit = 1;
	Expression input = 2;
}

message Group {
	Expression rows = 1;
	Expression input = 2;
}

message Join {
	Expression filter = 1;
	Expression left = 2;
	Expression right = 3;
}

/**
 * The different types of QIR algebra√Øc operators.
 */
message Not {
	Expression element = 1;
}

message Div {
	Expression left = 1;
	Expression right = 2;
}

message Minus {
	Expression left = 1;
	Expression right = 2;
}

message Mod {
	Expression left = 1;
	Expression right = 2;
}

message Plus {
	Expression left = 1;
	Expression right = 2;
}

message Star {
	Expression left = 1;
	Expression right = 2;
}

message Power {
	Expression left = 1;
	Expression right = 2;
}

message And {
	Expression left = 1;
	Expression right = 2;
}

message Or {
	Expression left = 1;
	Expression right = 2;
}

message Equal {
	Expression left = 1;
	Expression right = 2;
}

message LowerOrEqual {
	Expression left = 1;
	Expression right = 2;
}

message LowerThan {
	Expression left = 1;
	Expression right = 2;
}

message GreaterOrEqual {
	Expression left = 1;
	Expression right = 2;
}

message GreaterThan {
	Expression left = 1;
	Expression right = 2;
}

/**
 * The different types of QIR functional nodes.
 */
message Identifier {
	string name = 1;
}

message Lambda {
	Expression parameter = 1;
	Expression body = 2;
}

message Fixed {}

message Application {
	Expression function = 1;
	Expression argument = 2;
}

message Conditional {
	Expression condition = 1;
	Expression on_true = 2;
	Expression on_false = 3;
}

/**
 * The different types of QIR list nodes.
 */
message ListNil {}

message ListCons {
	Expression head = 1;
	Expression tail = 2;
}

message ListDestr {
	Expression input = 1;
	Expression on_nil = 2;
	Expression on_cons = 3;
}

/**
 * The different types of QIR named tuple nodes.
 */
message TupleNil {}

message TupleCons {
	Expression key = 1;
	Expression value = 2;
	Expression tail = 3;
}

message TupleDestr {
	Expression input = 1;
	Expression key = 2;
}

/**
 * Other special nodes supported by the QIR.
 */
message Builtin {
	string module = 1;
	string name = 2;
}

message Bytecode {
	bytes code = 1;
}

message Database {
	string driver = 1;
	string name = 2;
	string host = 3;
	int32 port = 4;
	string username = 5;
	string password = 6;
}

message Table {
	Database database = 1;
	string name = 2;
}

/**
 * A QIR expression.
 */
message Expression {
	oneof node {
		Null Null = 1;
		Number Number = 2;
		Double Double = 3;
		String String = 4;
		Boolean Boolean = 5;

		Scan Scan = 11;
		Filter Filter = 12;
		Project Project = 13;
		Sort Sort = 14;
		Limit Limit = 15;
		Group Group = 16;
		Join Join = 17;

		Not Not = 21;
		Div Div = 22;
		Minus Minus = 23;
		Mod Mod = 24;
		Plus Plus = 25;
		Star Star = 26;
		Power Power = 27;
		And And = 28;
		Or Or = 29;
		Equal Equal = 30;
		LowerOrEqual LowerOrEqual = 31;
		LowerThan LowerThan = 32;
		GreaterOrEqual GreaterOrEqual = 33;
		GreaterThan GreaterThan = 34;

		Identifier Identifier = 41;
		Lambda Lambda = 42;
		Lambda Fixed = 43;
		Application Application = 44;
		Conditional Conditional = 45;

		ListNil ListNil = 51;
		ListCons ListCons = 52;
		ListDestr ListDestr = 53;

		TupleNil TupleNil = 61;
		TupleCons TupleCons = 62;
		TupleDestr TupleDestr = 63;

		Builtin Builtin = 71;
		Bytecode Bytecode = 72;
		Database Database = 73;
		Table Table = 74;
	}
}

/**
 * A remote QIR evaluation service.
 */
service Evaluator {
	rpc Evaluate (Expression) returns (Expression) {}
}
